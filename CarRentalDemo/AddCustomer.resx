<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>